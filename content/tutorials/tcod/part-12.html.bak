---
title: "Part 12 - Increasing Difficulty"
date: 2019-03-30T09:34:08-07:00
draft: false
---


        <p>
        Right now, our game doesn't feel like much of a roguelike. It's far too easy! On top of that, the game doesn't
        get harder as you progress. We'll remedy that in this chapter, by making enemies stronger, and staggering
        enemies and equipment drops through deeper levels of the dungeon.
        </p>

        <p>
        Before we do that though, let's address something in our design that will likely cause headache in the future:
        our random choice selection for monsters and items. Right now, we're picking a random number between 0 and 100,
        and checking if that number is less than the "chances" for a certain item. This works alright for just a few
        options, but chances are, you'll want a lot more enemies than just two, and more items than just four.
        </p>

        <p>
        A better way to accomplish this is to assign each item a "weight", which determines how likely the enemy/item
        is to be created. We could then pass the choices and their weights to a function, which would pick one at random
        and return the selection.
        </p>

        <p>
        Create a new file called <code>random_utils.py</code> and put the following in it:
        </p>

        <pre>from random import randint


def random_choice_index(chances):
    random_chance = randint(1, sum(chances))

    running_sum = 0
    choice = 0
    for w in chances:
        running_sum += w

        if random_chance <= running_sum:
            return choice
        choice += 1


def random_choice_from_dict(choice_dict):
    choices = list(choice_dict.keys())
    chances = list(choice_dict.values())

    return choices[random_choice_index(chances)]</pre>

        <p>
        Let's put this new functions to use. Open <code>game_map.py</code> and modify it like this:
        </p>

        <pre>...
from map_objects.tile import Tile

<span style="color: green">from random_utils import random_choice_from_dict</span>

from render_functions import RenderOrder
...</pre>

        <pre>    def place_entities(self, room, entities, max_monsters_per_room, max_items_per_room):
        number_of_monsters = randint(0, max_monsters_per_room)
        number_of_items = randint(0, max_items_per_room)

        <span style="color: green">monster_chances = {'orc': 80, 'troll': 20}
        item_chances = {'healing_potion': 70, 'lightning_scroll': 10, 'fireball_scroll': 10, 'confusion_scroll': 10}</span>

        for i in range(number_of_monsters):
            x = randint(room.x1 + 1, room.x2 - 1)
            y = randint(room.y1 + 1, room.y2 - 1)

            if not any([entity for entity in entities if entity.x == x and entity.y == y]):
                <span style="color: green">monster_choice = random_choice_from_dict(monster_chances)</span>

                <span style="color: red; text-decoration: line-through">if randint(0, 100) < 80:</span>
                <span style="color: green">if monster_choice == 'orc':</span>
                    fighter_component = Fighter(hp=10, defense=0, power=3, xp=35)
                    ai_component = BasicMonster()

                    monster = Entity(x, y, 'o', libtcod.desaturated_green, 'Orc', blocks=True,
                                     render_order=RenderOrder.ACTOR, fighter=fighter_component, ai=ai_component)
                else:
                    fighter_component = Fighter(hp=16, defense=1, power=4, xp=100)
                    ai_component = BasicMonster()

                    monster = Entity(x, y, 'T', libtcod.darker_green, 'Troll', blocks=True, fighter=fighter_component,
                                     render_order=RenderOrder.ACTOR, ai=ai_component)

                entities.append(monster)

        for i in range(number_of_items):
            x = randint(room.x1 + 1, room.x2 - 1)
            y = randint(room.y1 + 1, room.y2 - 1)

            if not any([entity for entity in entities if entity.x == x and entity.y == y]):
                <span style="color: red; text-decoration: line-through;">item_chance = randint(0, 100)</span>
                <span style="color: green">item_choice = random_choice_from_dict(item_chances)</span>

                <span style="color: red; text-decoration: line-through;">if item_chance < 70:</span>
                <span style="color: green">if item_choice == 'healing_potion':</span>
                    item_component = Item(use_function=heal, amount=4)
                    item = Entity(x, y, '!', libtcod.violet, 'Healing Potion', render_order=RenderOrder.ITEM,
                                  item=item_component)
                <span style="color: red; text-decoration: line-through;">elif item_chance < 80:</span>
                <span style="color: green">elif item_choice == 'fireball_scroll':</span>
                    item_component = Item(use_function=cast_fireball, targeting=True, targeting_message=Message(
                        'Left-click a target tile for the fireball, or right-click to cancel.', libtcod.light_cyan),
                                          damage=12, radius=3)
                    item = Entity(x, y, '#', libtcod.red, 'Fireball Scroll', render_order=RenderOrder.ITEM,
                                  item=item_component)
                <span style="color: red; text-decoration: line-through;">elif item_chance < 90:</span>
                <span style="color: green">elif item_choice == 'confusion_scroll':</span>
                    item_component = Item(use_function=cast_confuse, targeting=True, targeting_message=Message(
                        'Left-click an enemy to confuse it, or right-click to cancel.', libtcod.light_cyan))
                    item = Entity(x, y, '#', libtcod.light_pink, 'Confusion Scroll', render_order=RenderOrder.ITEM,
                                  item=item_component)
                else:
                    item_component = Item(use_function=cast_lightning, damage=20, maximum_range=5)
                    item = Entity(x, y, '#', libtcod.yellow, 'Lightning Scroll', render_order=RenderOrder.ITEM,
                                  item=item_component)

                entities.append(item)</pre>

        <p>
        We assign each enemy or item to a weight, and then get the selection from our new function. Note that while
        our weights still sum up to 100, they don't have to.
        </p>

        <p>
        This is a lot more extensible than our previous solution, but we still haven't achieved what we set out to.
        What we really want is variable weights depending on the dungeon floor. That is, the deeper you go, the more
        likely you run into Trolls instead of Orcs, and the more likely you are to find useful items rather than just
        healing potions.
        </p>

<p>
    Let's create a new function that will accept a range of values that tell us when a certain thing appears in the
    dungeon, and with what weight. The function returns the weight appropriate for the dungeon level. It should go in
    <code>random_utils.py</code> and it looks like this:
</p>

        <pre>from random import randint


<span style="color: green">def from_dungeon_level(table, dungeon_level):
    for (value, level) in reversed(table):
        if dungeon_level >= level:
            return value

    return 0</span>


def random_choice_index(chances):
    ...</pre>

<p>
    This might not make sense right away, but let's put it into practice and see what happens. We can remove the
<code>max_monsters_per_room</code> and <code>max_items_per_room</code> variables, since they'll be determined by the
dungeon level instead of being passed to the function.
</p>

        <pre>...
from map_objects.tile import Tile

from random_utils import <span style="color: green">from_dungeon_level,</span> random_choice_from_dict

from render_functions import RenderOrder</pre>

        <pre>    <span style="color: red; text-decoration: line-through">def place_entities(self, room, entities, max_monsters_per_room, max_items_per_room):</span>
    <span style="color: green">def place_entities(self, room, entities):</span>
        <span style="color: green">max_monsters_per_room = from_dungeon_level([[2, 1], [3, 4], [5, 6]], self.dungeon_level)
        max_items_per_room = from_dungeon_level([[1, 1], [2, 4]], self.dungeon_level)</span>

        number_of_monsters = randint(0, max_monsters_per_room)
        number_of_items = randint(0, max_items_per_room)

        <span style="color: red; text-decoration: line-through">monster_chances = {'orc': 80, 'troll': 20}</span>
        <span style="color: red; text-decoration: line-through">item_chances = {'healing_potion': 70, 'lightning_scroll': 10, 'fireball_scroll': 10, 'confusion_scroll': 10}</span>

        <span style="color: green">monster_chances = {
            'orc': 80,
            'troll': from_dungeon_level([[15, 3], [30, 5], [60, 7]], self.dungeon_level)
        }</span>

        <span style="color: green">item_chances = {
            'healing_potion': 35,
            'lightning_scroll': from_dungeon_level([[25, 4]], self.dungeon_level),
            'fireball_scroll': from_dungeon_level([[25, 6]], self.dungeon_level),
            'confusion_scroll': from_dungeon_level([[10, 2]], self.dungeon_level)
        }</span></pre>

        <p>
        We'll also need to update our call to <code>place_entities</code> in <code>make_map</code>
        </p>
<pre>                        ...
                        self.create_h_tunnel(prev_x, new_x, new_y)

                <span style="color: red; text-decoration: line-through;">self.place_entities(new_room, entities, max_monsters_per_room, max_items_per_room)</span>
                <span style="color: green">self.place_entities(new_room, entities)</span>

                rooms.append(new_room)
                ...</pre>

        <p>
        Because we've removed <code>max_monsters_per_room</code> and <code>max_items_per_room</code> from the function
        call, we can also remove them from the definition of <code>make_map</code>.
        </p>

        <pre>
    <span style="color: red; text-decoration: line-through;">def make_map(self, max_rooms, room_min_size, room_max_size, map_width, map_height, player, entities,</span>
                 <span style="color: red; text-decoration: line-through;">max_monsters_per_room, max_items_per_room):</span>
    <span style="color: green">def make_map(self, max_rooms, room_min_size, room_max_size, map_width, map_height, player, entities):</span></pre>

        <p>
        We should also remove these variables from the calls to <code>make_map</code> in
        <code>initialize_new_game.py</code>...
        </p>

        <pre>    <span style="color: red; text-decoration: line-through;">game_map.make_map(constants['max_rooms'], constants['room_min_size'], constants['room_max_size'],</span>
                      <span style="color: red; text-decoration: line-through;">constants['map_width'], constants['map_height'], player, entities,</span>
                      <span style="color: red; text-decoration: line-through;">constants['max_monsters_per_room'], constants['max_items_per_room'])</span>
    <span style="color: green">game_map.make_map(constants['max_rooms'], constants['room_min_size'], constants['room_max_size'],
                      constants['map_width'], constants['map_height'], player, entities)</span></pre>

        <p>
        ... and in <code>next_floor</code> (in <code>game_map.py</code>):
        </p>

        <pre>        <span style="color: red; text-decoration: line-through;">self.make_map(constants['max_rooms'], constants['room_min_size'], constants['room_max_size'],</span>
                      <span style="color: red; text-decoration: line-through;">constants['map_width'], constants['map_height'], player, entities,</span>
                      <span style="color: red; text-decoration: line-through;">constants['max_monsters_per_room'], constants['max_items_per_room'])</span>
        <span style="color: green">self.make_map(constants['max_rooms'], constants['room_min_size'], constants['room_max_size'],
                      constants['map_width'], constants['map_height'], player, entities)</span></pre>

        <p>
        Now our dungeon gets more dangerous as we go deeper! Mission accomplished! The game itself is still pretty easy
        though, so let's change that by modifying the default values for each entity's <code>Fighter</code> component,
        including the player. We'll also modify the values for the healing potion, fireball scroll, and lightning
        scroll.
        </p>

        <pre>
def get_game_variables(constants):
    <span style="color: red; text-decoration: line-through">fighter_component = Fighter(hp=30, defense=2, power=5)</span>
    <span style="color: green">fighter_component = Fighter(hp=100, defense=1, power=4)</span>
    inventory_component = Inventory(26)
    ...</pre>

        <pre>                ...
                if monster_choice == 'orc':
                    <span style="color: red; text-decoration: line-through">fighter_component = Fighter(hp=10, defense=0, power=3, xp=35)</span>
                    <span style="color: green">fighter_component = Fighter(hp=20, defense=0, power=4, xp=35)</span>
                    ai_component = BasicMonster()

                    monster = Entity(x, y, 'o', libtcod.desaturated_green, 'Orc', blocks=True,
                                     render_order=RenderOrder.ACTOR, fighter=fighter_component, ai=ai_component)
                else:
                    <span style="color: red; text-decoration: line-through">fighter_component = Fighter(hp=16, defense=1, power=4, xp=100)</span>
                    <span style="color: green">fighter_component = Fighter(hp=30, defense=2, power=8, xp=100)</span>
                    ai_component = BasicMonster()

                    monster = Entity(x, y, 'T', libtcod.darker_green, 'Troll', blocks=True, fighter=fighter_component,
                                     render_order=RenderOrder.ACTOR, ai=ai_component)
                ...</pre>

        <pre>            ...
            if not any([entity for entity in entities if entity.x == x and entity.y == y]):
                item_choice = random_choice_from_dict(item_chances)

                if item_choice == 'healing_potion':
                    <span style="color: red; text-decoration: line-through">item_component = Item(use_function=heal, amount=4)</span>
                    <span style="color: green;">item_component = Item(use_function=heal, amount=40)</span>
                    item = Entity(x, y, '!', libtcod.violet, 'Healing Potion', render_order=RenderOrder.ITEM,
                                  item=item_component)
                elif item_choice == 'fireball_scroll':
                    <span style="color: red; text-decoration: line-through">item_component = Item(use_function=cast_fireball, targeting=True, targeting_message=Message(</span>
                        <span style="color: red; text-decoration: line-through">'Left-click a target tile for the fireball, or right-click to cancel.', libtcod.light_cyan),</span>
                                          <span style="color: red; text-decoration: line-through">damage=12, radius=3)</span>
                    <span style="color: green;">item_component = Item(use_function=cast_fireball, targeting=True, targeting_message=Message(
                        'Left-click a target tile for the fireball, or right-click to cancel.', libtcod.light_cyan),
                                          damage=25, radius=3)</span>
                    item = Entity(x, y, '#', libtcod.red, 'Fireball Scroll', render_order=RenderOrder.ITEM,
                                  item=item_component)
                elif item_choice == 'confusion_scroll':
                    item_component = Item(use_function=cast_confuse, targeting=True, targeting_message=Message(
                        'Left-click an enemy to confuse it, or right-click to cancel.', libtcod.light_cyan))
                    item = Entity(x, y, '#', libtcod.light_pink, 'Confusion Scroll', render_order=RenderOrder.ITEM,
                                  item=item_component)
                else:
                    <span style="color: red; text-decoration: line-through">item_component = Item(use_function=cast_lightning, damage=20, maximum_range=5)</span>
                    <span style="color: green">item_component = Item(use_function=cast_lightning, damage=40, maximum_range=5)</span>
                    item = Entity(x, y, '#', libtcod.yellow, 'Lightning Scroll', render_order=RenderOrder.ITEM,
                                  item=item_component)
                ...</pre>

        <p>
        That's all for today's tutorial. The next part will be the last one. We're almost there!
        </p>

        <p>
    If you want to see the code so far in its entirety,
    <a href="https://github.com/TStand90/roguelike_tutorial_revised/tree/part12">click here</a>.
</p>

<p>
    <a href="/tutorials/tcod/part-13">Click here to move on to the next part of this tutorial.</a>
</p>
