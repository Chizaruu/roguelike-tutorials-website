---
title: "Part 8 - Items and Inventory"
date: 2019-03-30T09:33:55-07:00
draft: false
---

    <div>
        <p>
            So far, our game has movement, dungeon exploring, combat, and AI (okay, we're stretching the meaning of
            "intelligence" in <i>artificial intelligence</i> to its limits, but bear with me here). Now it's time
            for another staple of the roguelike genre: items! Why would our rogue venture into the dungeons of doom
            if not for some sweet loot, after all?
        </p>

        <p>
            We'll start by placing one type of item, the healing potion in this case, and then we'll work on our
            implementation of the inventory. In the next chapter, we'll add different types of items, but for now,
            just the healing potion will suffice.
        </p>

        <p>
            Make the following changes to <code>place_entities</code> to start placing some health potion entities.
            They won't do anything yet, but they'll at least appear on the map.
        </p>

        <pre>    def place_entities(self, room, entities, max_monsters_per_room<span style="color: green">, max_items_per_room</span>):
        number_of_monsters = randint(0, max_monsters_per_room)
        <span style="color: green">number_of_items = randint(0, max_items_per_room)</span>

        for i in range(number_of_monsters):
            ...

        <span style="color: green">for i in range(number_of_items):
            x = randint(room.x1 + 1, room.x2 - 1)
            y = randint(room.y1 + 1, room.y2 - 1)

            if not any([entity for entity in entities if entity.x == x and entity.y == y]):
                item = Entity(x, y, '!', libtcod.violet, 'Healing Potion', render_order=RenderOrder.ITEM)

                entities.append(item)</span></pre>

        <p>
            Update the call to <code>place_entities</code> in <code>make_map</code>:
        </p>

        <pre>                self.place_entities(new_room, entities, max_monsters_per_room<span style="color: green">, max_items_per_room</span>)</pre>

        <p>
            Update the definition of <code>make_map</code> to include the new <code>max_items_per_room</code> variable.
        </p>

        <pre>    def make_map(self, max_rooms, room_min_size, room_max_size, map_width, map_height, player, entities,
                 max_monsters_per_room<span style="color: green">, max_items_per_room</span>):</pre>

        <p>
            And finally, the call in <code>engine.py</code>. We'll also define the variable here.
        </p>

        <pre>    ...
    max_monsters_per_room = 3
    <span style="color: green">max_items_per_room = 2</span>
    ...
    game_map = GameMap(map_width, map_height)
    game_map.make_map(max_rooms, room_min_size, room_max_size, map_width, map_height, player, entities,
                      max_monsters_per_room, <span style="color: green">max_items_per_room</span>)

    fov_recompute = True
    ...</pre>

        <p>
            You should now see a few health potions here and there in the dungeon. But we can't pick anything up yet.
            An obvious place to start would be by giving the player an inventory. Let's create a new component,
            called Inventory, which will hold a list of items, along with the maximum amount of items the inventory
            can have. Create a new file in the <code>components</code> folder, named <code>inventory.py</code>, and
            put the following in it:
        </p>

        <pre>class Inventory:
    def __init__(self, capacity):
        self.capacity = capacity
        self.items = []</pre>

        <p>
            The <code>items</code> list will be what holds the actual item entities. Capacity determines how many items
            we can pick up in total.
        </p>

        <p>
            But what types of entities can we pick up in the first place? We may or may not want the player picking
            up <i>every</i> type of entity that can be walked on (corpses for example), so how do we distinguish
            between the two?
        </p>

        <p>
            Let's create a new component, called <code>Item</code>, which we'll add to entities when we want them
            to be able to be picked up. Create a file called <code>item.py</code> in <code>components</code>, and
            add the following class to it:
        </p>

        <pre>class Item:
    def __init__(self):
        pass</pre>

        <p>
            Wait, what? An empty class? Don't worry, we'll add some more interesting stuff here once we move on to using
            our items. But for now, if an Entity has this component, we can pick it up, and if not, we can't. Therefore,
            all we need is an empty class at the moment.
        </p>

        <p>
        Now let's modify the <code>Entity</code> class to accept the <code>Item</code> and <code>Inventory</code>
            components.
        </p>

            <pre>class Entity:
    def __init__(self, x, y, char, color, name, blocks=False, render_order=RenderOrder.CORPSE, fighter=None, ai=None<span style="color: green">,
                 item=None, inventory=None</span>):
        self.x = x
        self.y = y
        self.char = char
        self.color = color
        self.name = name
        self.blocks = blocks
        self.render_order = render_order
        self.fighter = fighter
        self.ai = ai
        <span style="color: green">self.item = item
        self.inventory = inventory</span>

        if self.fighter:
            self.fighter.owner = self

        if self.ai:
            self.ai.owner = self

        <span style="color: green">if self.item:
            self.item.owner = self

        if self.inventory:
            self.inventory.owner = self</span></pre>

            <p>
            With our <code>Entity</code> class modified, we'll need to modify the player and the healing potions to
            have <code>Inventory</code> and <code>Item</code> respectively. This tutorial won't give monsters an
            inventory, but you could attach the <code>Inventory</code> component to them for a similar effect.
            </p>

            <p>
            In <code>engine.py</code>:
            </p>

            <pre>    ...
    fighter_component = Fighter(hp=30, defense=2, power=5)
    <span style="color: green">inventory_component = Inventory(26)</span>
    <span style="color: red; text-decoration: line-through;">player = Entity(0, 0, '@', libtcod.white, 'Player', blocks=True, render_order=RenderOrder.ACTOR, fighter=fighter_component)</span>
    <span style="color: green">player = Entity(0, 0, '@', libtcod.white, 'Player', blocks=True, render_order=RenderOrder.ACTOR,
                    fighter=fighter_component, inventory=inventory_component)</span>
    entities = [player]
    ...</pre>

            <p>
            Of course, be sure to import <code>Inventory</code> as well:
            </p>

            <pre>from components.fighter import Fighter
<span style="color: green">from components.inventory import Inventory</span>
from death_functions import kill_monster, kill_player
...</pre>

            <p>
            Then, modify where we put the healing potions in the <code>place_entities</code> function.
            </p>

            <pre>                <span style="color: green">item_component = Item()</span>
                <span style="color: red; text-decoration: line-through">item = Entity(x, y, '!', libtcod.violet, 'Healing Potion', render_order=RenderOrder.ITEM)</span>
                <span style="color: green">item = Entity(x, y, '!', libtcod.violet, 'Healing Potion', render_order=RenderOrder.ITEM,
                              item=item_component)</span></pre>

            <p>
            ... And don't forget the import:
            </p>

            <pre>...
from components.ai import BasicMonster
from components.fighter import Fighter
<span style="color: green">from components.item import Item</span>

from entity import Entity
...</pre>

        <p>
            How does our player go about picking things up then? Roguelikes traditionally allow you to pick up an item
        if you're standing on top of it, and ours will be no different. Many of them use the 'g' key (probably for
        'grab' or 'get') for the pickup command, so we'll use that as well. Modify <code>handle_keys</code> in
        <code>input_handlers.py</code> to process the 'g' key:
        </p>

        <pre>    ...
    elif key_char == 'n':
        return {'move': (1, 1)}

    <span style="color: green">if key_char == 'g':
        return {'pickup': True}</span>

    if key.vk == libtcod.KEY_ENTER and key.lalt:
        ...</pre>

            <p>
                Now we'll need to check for the 'pickup' action in our engine.
            </p>

            <pre>        ...
        move = action.get('move')
        <span style="color: green">pickup = action.get('pickup')</span>
        exit = action.get('exit')
        ...</pre>

            <p>
            Now we'll need to actually <i>do</i> something when this 'pickup' variable is true. First, let's create
            a method for the <code>Inventory</code> class to add an item to the inventory. We'll use the same
            "results" pattern as before. If adding the item to the inventory was successful, then we'll return a result
            saying we picked up the item. If not, we'll send a result that indicates a failure. The engine will then
            have to determine what to do with the item entity.
        </p>

        <pre><span style="color: green">import tcod as libtcod

from game_messages import Message</span>


class Inventory:
    def __init__(self, capacity):
        self.capacity = capacity
        self.items = []

    <span style="color: green">def add_item(self, item):
        results = []

        if len(self.items) >= self.capacity:
            results.append({
                'item_added': None,
                'message': Message('You cannot carry any more, your inventory is full', libtcod.yellow)
            })
        else:
            results.append({
                'item_added': item,
                'message': Message('You pick up the {0}!'.format(item.name), libtcod.blue)
            })

            self.items.append(item)

        return results</span></pre>

        <p>
            Let's add some code in <code>engine.py</code> to process the results of adding an item to the inventory.
        </p>

            <pre>        if move and game_state == GameStates.PLAYERS_TURN:
            ...

        <span style="color: green">elif pickup and game_state == GameStates.PLAYERS_TURN:
            for entity in entities:
                if entity.item and entity.x == player.x and entity.y == player.y:
                    pickup_results = player.inventory.add_item(entity)
                    player_turn_results.extend(pickup_results)

                    break
            else:
                message_log.add_message(Message('There is nothing here to pick up.', libtcod.yellow))</span>

        if exit:
            ...</pre>

            <p>
            We'll need to import <code>Message</code> for this to work:
            </p>

            <pre>from game_messages import <span style="color: green">Message,</span> MessageLog</pre>

            <p>
                Basically, we loop through each entity on the map, checking if it's an item and if it is occupying the
            same space as the player. If so, we add it to the inventory and tack on the results to
                <code>player_turn_results</code>, and if not, we create a message informing the player that nothing
            can be picked up. The 'break' statement makes it so that we can only pick up one item at a time (though
            perhaps in your game, you'll allow the player to pick up several things at once).
            </p>

            <p>
            Now let's process the results of the pickup, in our loop that processes the player's turn results:
            </p>

            <pre>        ...
        for player_turn_result in player_turn_results:
            message = player_turn_result.get('message')
            dead_entity = player_turn_result.get('dead')
            <span style="color: green">item_added = player_turn_result.get('item_added')</span>

            if message:
                message_log.add_message(message)

            if dead_entity:
                if dead_entity == player:
                    message, game_state = kill_player(dead_entity)
                else:
                    message = kill_monster(dead_entity)

                message_log.add_message(message)

            <span style="color: green">if item_added:
                entities.remove(item_added)

                game_state = GameStates.ENEMY_TURN</span>

        if game_state == GameStates.ENEMY_TURN:
            ...</pre>

            <p>
            This just handles removing the entity from the entities list (since it's now located in the player's
            inventory, not the map) and sets the game state to the enemy's turn. Simple enough.
            </p>

            <p>
            Run the project, and you should be able to pick the healing potions up off the ground. Of course, this
            doesn't do our rogue any good at the moment; we can't use any of them yet, so we're really just wasting
            a turn.
            </p>

            <p>
            Before we get into how to use items, we need to have a way to look at and select which item to use.
            We'll create an inventory interface, which the player can open and select an item from. Let's start by
            creating a new file, called <code>menus.py</code>, where we'll store our menu functions for the inventory
            and any other menus we'll need for this tutorial. Put the following code in that file:
            </p>

            <pre>import tcod as libtcod


def menu(con, header, options, width, screen_width, screen_height):
    if len(options) > 26: raise ValueError('Cannot have a menu with more than 26 options.')

    # calculate total height for the header (after auto-wrap) and one line per option
    header_height = libtcod.console_get_height_rect(con, 0, 0, width, screen_height, header)
    height = len(options) + header_height

    # create an off-screen console that represents the menu's window
    window = libtcod.console_new(width, height)

    # print the header, with auto-wrap
    libtcod.console_set_default_foreground(window, libtcod.white)
    libtcod.console_print_rect_ex(window, 0, 0, width, height, libtcod.BKGND_NONE, libtcod.LEFT, header)

    # print all the options
    y = header_height
    letter_index = ord('a')
    for option_text in options:
        text = '(' + chr(letter_index) + ') ' + option_text
        libtcod.console_print_ex(window, 0, y, libtcod.BKGND_NONE, libtcod.LEFT, text)
        y += 1
        letter_index += 1

    # blit the contents of "window" to the root console
    x = int(screen_width / 2 - width / 2)
    y = int(screen_height / 2 - height / 2)
    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 0.7)</pre>

            <pre>def menu(con, header, options, width, screen_width, screen_height):
    ...

<span style="color: green">def inventory_menu(con, header, inventory, inventory_width, screen_width, screen_height):
    # show a menu with each item of the inventory as an option
    if len(inventory.items) == 0:
        options = ['Inventory is empty.']
    else:
        options = [item.name for item in inventory.items]

    menu(con, header, options, inventory_width, screen_width, screen_height)</span></pre>

        <p>
            How might we display this menu? One way is to switch our game state, and when the game state is set to
            "inventory menu", we'll display the menu and accept input for it. So let's add the option to
            <code>GameStates</code>:
        </p>

        <pre>from enum import Enum


class GameStates(Enum):
    PLAYERS_TURN = 1
    ENEMY_TURN = 2
    PLAYER_DEAD = 3
    <span style="color: green">SHOW_INVENTORY = 4</span></pre>

        <p>
            When do we switch to this new state? Let's add a new key command to switch to "inventory" mode. As you
            may have guessed, we'll press the 'i' key to do this.
        </p>

        <pre>    ...
    if key_char == 'g':
        return {'pickup': True}

    <span style="color: green">elif key_char == 'i':
        return {'show_inventory': True}</span>

    if key.vk == libtcod.KEY_ENTER and key.lalt:
        ...</pre>

        <p>
            Not only do we want to switch the game state to <code>SHOW_INVENTORY</code>, we'll also want to switch back
            to the previous game state if we exit the menu without doing anything. This makes it so that just opening
            the inventory doesn't waste a turn, and so that we can view our inventory after death (this makes it sting
            that much more). So we'll need a variable to keep track of the last game state.
        </p>

        <pre>    ...
    game_state = GameStates.PLAYERS_TURN
    <span style="color: green">previous_game_state = game_state</span>

    while not libtcod.console_is_window_closed():
        ...</pre>

        <pre>        ...
        pickup = action.get('pickup')
        <span style="color: green">show_inventory = action.get('show_inventory')</span>
        exit = action.get('exit')
        ...</pre>

        <pre>
        elif pickup and game_state == GameStates.PLAYERS_TURN:
            ...

        <span style="color: green">if show_inventory:
            previous_game_state = game_state
            game_state = GameStates.SHOW_INVENTORY</span>

        if exit:
            <span style="color: green">if game_state == GameStates.SHOW_INVENTORY:
                game_state = previous_game_state
            else:</span>
                <span style="color: blue">return True</span></pre>

        <p>
            We're modifying our previous "exit" section to just revert back to the previous game state if we open
            the inventory. That way, the "escape" key just closes the menu, rather than closing the game.
        </p>

        <p>
            Now we're switching the game's state, but we still need to display the menu. Needless to say, we'll need
            to modify <code>render_all</code>. Because we'll only display the inventory when the game state is
            <code>SHOW_INVENTORY</code>, the <code>render_all</code> function will need to be aware of the state.
            Modify the call in <code>engine.py</code>:
        </p>

        <pre>render_all(con, panel, entities, player, game_map, fov_map, fov_recompute, message_log, screen_width,
                   screen_height, bar_width, panel_height, panel_y, mouse, colors, <span style="color: green">game_state</span>)</pre>

        <p>
            And now for the definition:
        </p>

        <pre>def render_all(con, panel, entities, player, game_map, fov_map, fov_recompute, message_log, screen_width, screen_height,
               bar_width, panel_height, panel_y, mouse, colors<span style="color: green">, game_state</span>):
    ...
    ...
    libtcod.console_blit(panel, 0, 0, screen_width, panel_height, 0, 0, panel_y)

    <span style="color: green">if game_state == GameStates.SHOW_INVENTORY:
        inventory_menu(con, 'Press the key next to an item to use it, or Esc to cancel.\n',
                       player.inventory, 50, screen_width, screen_height)</span></pre>

        <p>
            We'll need to import <code>GameStates</code> and <code>inventory_menu</code> for this to work.
        </p>

        <pre>import tcod as libtcod

from enum import Enum

<span style="color: green">from game_states import GameStates

from menus import inventory_menu</span>


class RenderOrder(Enum):
    ...</pre>

        <p>
            Run the project now. You should be able to open the inventory menu and see all the items you've picked
            up so far. We can't quite use them yet, but we're almost there!
        </p>

        <p>
            In order to actually select an inventory item, we'll need to modify <code>handle_keys</code>. Why?
            Because we're selecting items using the letter keys, which is fine and good, but some of those
            keys we're using for movement and other things. It'd be nice if our function reacted differently
            depending on what our game's state was.
        </p>

        <p>
            Here's what we'll do: We'll split <code>handle_keys</code> up into several different functions,
            which will return different results depending on the game's state. Rename the <code>handle_keys</code>
            function to <code>handle_player_turn_keys</code>:
        </p>

        <pre><span style="color: red; text-decoration: line-through">def handle_keys(key):</span>
<span style="color: green">def handle_player_turn_keys(key):</span></pre>

        <p>
            Then, create a new <code>handle_keys</code> function, which calls <code>handle_player_turn_keys</code>
        </p>

        <pre>import tcod as libtcod

<span style="color: green">from game_states import GameStates


def handle_keys(key, game_state):
    if game_state == GameStates.PLAYERS_TURN:
        return handle_player_turn_keys(key)

    return {}</span>


def handle_player_turn_keys(key):
    ...</pre>

        <p>
            Don't forget to modify the call to <code>handle_keys</code> in <code>engine.py</code>:
        </p>

        <pre>action = handle_keys(key<span style="color: green">, game_state</span>)</pre>

        <p>
            Before we move on to the inventory part, let's cover our bases and put in a key handler for when the
            player is dead.
        </p>

        <pre>...
def handle_keys(key, game_state):
    if game_state == GameStates.PLAYERS_TURN:
        return handle_player_turn_keys(key)
    <span style="color: green">elif game_state == GameStates.PLAYER_DEAD:
        return handle_player_dead_keys(key)</span>

    return {}


def handle_player_turn_keys(key):
    ...


<span style="color: green">def handle_player_dead_keys(key):
    key_char = chr(key.c)

    if key_char == 'i':
        return {'show_inventory': True}

    if key.vk == libtcod.KEY_ENTER and key.lalt:
        # Alt+Enter: toggle full screen
        return {'fullscreen': True}
    elif key.vk == libtcod.KEY_ESCAPE:
        # Exit the menu
        return {'exit': True}

    return {}</span></pre>

        <p>
            Now, let's create a new function, called <code>handle_inventory_keys</code>, which will handle our
            input when the inventory menu is open.
        </p>

        <pre>...
def handle_keys(key, game_state):
    if game_state == GameStates.PLAYERS_TURN:
        return handle_player_turn_keys(key)
    elif game_state == GameStates.PLAYER_DEAD:
        return handle_player_dead_keys(key)
    <span style="color: green">elif game_state == GameStates.SHOW_INVENTORY:
        return handle_inventory_keys(key)</span>

    return {}
...

<span style="color: green">def handle_inventory_keys(key):
    index = key.c - ord('a')

    if index >= 0:
        return {'inventory_index': index}

    if key.vk == libtcod.KEY_ENTER and key.lalt:
        # Alt+Enter: toggle full screen
        return {'fullscreen': True}
    elif key.vk == libtcod.KEY_ESCAPE:
        # Exit the menu
        return {'exit': True}

    return {}</span></pre>

        <p>
            What's with the <code>ord</code> function? Long story short, we're converting the key pressed to an index.
            'a' will be 0, 'b' will be 1, and so on. This will allow us to select an item out of the inventory in
            <code>engine.py</code>. All we need the input handler to do is give us the index of what we picked; it
            doesn't need to know anything about the item or what it should do.
        </p>

        <p>
            Let's get this index in <code>engine.py</code> and do something with it!
        </p>

        <pre>        ...
        show_inventory = action.get('show_inventory')
        <span style="color: green">inventory_index = action.get('inventory_index')</span>
        exit = action.get('exit')
        ...</pre>

        <pre>        ...
        if show_inventory:
            ...

        <span style="color: green">if inventory_index is not None and previous_game_state != GameStates.PLAYER_DEAD and inventory_index < len(
                player.inventory.items):
            item = player.inventory.items[inventory_index]
            print(item)</span>

        if exit:
            ...</pre>

        <p>
            <i>*Note: The print statement is just a placeholder for now. We're close to actually using the item, I
                promise!</i>
        </p>

        <p>
            We're taking the index that we selected, and "using" (printing for now) the item selected. Run the project
            and verify that this works. Now that we have a way of opening the menu and selecting an item, we can, at
            long last, move on to using the item.
        </p>

        <p>
            So, how do we use the item? The <code>Item</code> component seems like an obvious place to do something.
            But, each item should do something different, right? So the <code>Item</code> class won't actually contain
            the functions for healing the player, or doing damage to an enemy. Instead, it will just hold the healing
            and damaging functions, along with whatever arguments we need to make that function work. We'll then
            take the results of that function (like usual) and process them.
        </p>

        <p>
            Modify <code>Item</code> like this:
        </p>

        <pre>class Item:
    def __init__(self<span style="color: green">, use_function=None, **kwargs</span>):
        <span style="color: red; text-decoration: line-through">pass</span>
        <span style="color: green">self.use_function = use_function
        self.function_kwargs = kwargs</span></pre>

        <p>
            What about the actual function though? We'll define that separately, which will allow us (in the next
            chapter) to freely assign functions to the <code>use_function</code>, thus changing the behavior of each
            item depending on our needs.
        </p>

        <p>
            Create a file, called <code>item_functions.py</code>, and put the following function in it:
        </p>

        <pre>import tcod as libtcod

from game_messages import Message


def heal(*args, **kwargs):
    entity = args[0]
    amount = kwargs.get('amount')

    results = []

    if entity.fighter.hp == entity.fighter.max_hp:
        results.append({'consumed': False, 'message': Message('You are already at full health', libtcod.yellow)})
    else:
        entity.fighter.heal(amount)
        results.append({'consumed': True, 'message': Message('Your wounds start to feel better!', libtcod.green)})

    return results</pre>

        <p>
            We're taking the <code>entity</code> that's using the item as the first argument (all of our functions
            will do this, even if they don't need it). We're also extracting the "amount" from "kwargs", which will
            be provided by the <code>function_kwargs</code> from the <code>Item</code> component.
        </p>

        <p>
            We'll need to add the <code>heal</code> method to the <code>Fighter</code> component for this to work
            right (note: both functions are called "heal", but they are not the same).
        </p>

        <pre>    ...
    def take_damage(self, amount):
        ...

    <span style="color: green">def heal(self, amount):
        self.hp += amount

        if self.hp > self.max_hp:
            self.hp = self.max_hp</span>

    def attack(self, target):
        ...</pre>

        <p>
            This may make more sense once we pass the <code>heal</code> function to the healing potions. Let's do
            that now; in the <code>place_entities</code> function in <code>game_map</code>:
        </p>

        <pre>            ...
            if not any([entity for entity in entities if entity.x == x and entity.y == y]):
                <span style="color: red; text-decoration: line-through">item_component = Item()</span>
                <span style="color: green">item_component = Item(use_function=heal, amount=4)</span>
                item = Entity(x, y, '!', libtcod.violet, 'Healing Potion', render_order=RenderOrder.ITEM,
                              item=item_component)</pre>

        <p>
            You'll need to import <code>heal</code> for this.
        </p>

        <pre>...
from entity import Entity

<span style="color: green">from item_functions import heal</span>

from map_objects.rectangle import Rect
...</pre>

        <p>
            Now our item has an actual function to fire off when it gets used. But <i>where</i> does this get called?
            Why not have our inventory call the function? Add the following functions to <code>Inventory</code>:
        </p>

        <pre>    ...
    <span style="color: green">def use(self, item_entity, **kwargs):
        results = []

        item_component = item_entity.item

        if item_component.use_function is None:
            results.append({'message': Message('The {0} cannot be used'.format(item_entity.name), libtcod.yellow)})
        else:
            kwargs = {**item_component.function_kwargs, **kwargs}
            item_use_results = item_component.use_function(self.owner, **kwargs)

            for item_use_result in item_use_results:
                if item_use_result.get('consumed'):
                    self.remove_item(item_entity)

            results.extend(item_use_results)

        return results

    def remove_item(self, item):
        self.items.remove(item)</span></pre>

        <pre>        ...
        if inventory_index is not None and previous_game_state != GameStates.PLAYER_DEAD and inventory_index < len(
                player.inventory.items):
            item = player.inventory.items[inventory_index]
            <span style="color: red; text-decoration: line-through">print(item)</span>
            <span style="color: green">player_turn_results.extend(player.inventory.use(item))</span></pre>

        <p>
            Finally, let's handle the results of the item use function in <code>engine.py</code>:
        </p>

        <pre>        ...
        for player_turn_result in player_turn_results:
            message = player_turn_result.get('message')
            dead_entity = player_turn_result.get('dead')
            item_added = player_turn_result.get('item_added')
            <span style="color: green">item_consumed = player_turn_result.get('consumed')</span>
            ...
            if item_added:
                entities.remove(item_added)

                game_state = GameStates.ENEMY_TURN

            <span style="color: green">if item_consumed:
                game_state = GameStates.ENEMY_TURN</span>
            ...</pre>

        <p>
            Run the project now. You can now consume the health potions, and this will take a turn. Potions will
            not be used if you're at full health already.
        </p>

        <p>
            Final thing before we end the chapter: dropping items. This may seem pointless now, but later on, when
            we have multiple levels in the dungeon, the player may have to make some decisions about which items
            to keep and which to drop.
        </p>

        <p>
            First, add a new game state:
        </p>

        <pre>class GameStates(Enum):
    PLAYERS_TURN = 1
    ENEMY_TURN = 2
    PLAYER_DEAD = 3
    SHOW_INVENTORY = 4
    <span style="color: green">DROP_INVENTORY = 5</span></pre>

        <p>
            Then, modify <code>handle_player_turn_keys</code> to respond to the 'd' key:
        </p>

        <pre>    ...
    elif key_char == 'i':
        return {'show_inventory': True}

    <span style="color: green">elif key_char == 'd':
        return {'drop_inventory': True}</span>

    if key.vk == libtcod.KEY_ENTER and key.lalt:
        ...</pre>

        <p>
            Update the action handler section to accept this:
        </p>

        <pre>        ...
        show_inventory = action.get('show_inventory')
        <span style="color: green">drop_inventory = action.get('drop_inventory')</span>
        inventory_index = action.get('inventory_index')
        ...</pre>

        <p>
            We'll need to switch the game state when the player presses this key:
        </p>

        <pre>        ...
        if show_inventory:
            previous_game_state = game_state
            game_state = GameStates.SHOW_INVENTORY

        <span style="color: green">if drop_inventory:
            previous_game_state = game_state
            game_state = GameStates.DROP_INVENTORY</span>

        if inventory_index is not None and previous_game_state != GameStates.PLAYER_DEAD and inventory_index < len(
                player.inventory.items):
            ...</pre>

        <p>
            You might think we need to add another function to handle the keys for dropping inventory, but we actually
            don't; we can just use our code for <code>SHOW_INVENTORY</code> for this same purpose. Just modify the
            "if" statement in <code>handle_keys</code>:
        </p>

        <pre>def handle_keys(key, game_state):
    if game_state == GameStates.PLAYERS_TURN:
        return handle_player_turn_keys(key)
    elif game_state == GameStates.PLAYER_DEAD:
        return handle_player_dead_keys(key)
    <span style="color: red; text-decoration: line-through">elif game_state == GameStates.SHOW_INVENTORY:</span>
    <span style="color: green">elif game_state in (GameStates.SHOW_INVENTORY, GameStates.DROP_INVENTORY):</span>
        return handle_inventory_keys(key)

    return {}</pre>

        <p>
            Also, modify the <code>exit</code> section:
        </p>

        <pre>        ...
        if exit:
            <span style="color: red; text-decoration: line-through">if game_state in GameStates.SHOW_INVENTORY:</span>
            <span style="color: green">if game_state in (GameStates.SHOW_INVENTORY, GameStates.DROP_INVENTORY):</span>
                game_state = previous_game_state
            else:
                return True
        ...</pre>

        <p>
            Now for displaying the drop menu. It's really not different from the inventory menu, so we can use
            the same function, and send a different title to it.
        </p>

        <pre>    ...
    <span style="color: red; text-decoration: line-through">if game_state == GameStates.SHOW_INVENTORY:</span>
        <span style="color: red; text-decoration: line-through">inventory_menu(con, 'Press the key next to an item to use it, or Esc to cancel.\n',</span>
                       <span style="color: red; text-decoration: line-through">player.inventory, 50, screen_width, screen_height)</span>

    <span style="color: green">if game_state in (GameStates.SHOW_INVENTORY, GameStates.DROP_INVENTORY):
        if game_state == GameStates.SHOW_INVENTORY:
            inventory_title = 'Press the key next to an item to use it, or Esc to cancel.\n'
        else:
            inventory_title = 'Press the key next to an item to drop it, or Esc to cancel.\n'

        inventory_menu(con, inventory_title, player.inventory, 50, screen_width, screen_height)</span></pre>

        <p>
            What happens when the player pressed a key in this menu? Let's modify the part in <code>engine.py</code>
            that handled the <code>inventory_index</code> to take the game's state into account. If it's
            <code>SHOW_INVENTORY</code>, then use the item, and if it's <code>DROP_INVENTORY</code>, then call
            a function to drop the item.
        </p>

        <pre>if inventory_index is not None and previous_game_state != GameStates.PLAYER_DEAD and inventory_index < len(
                player.inventory.items):
            item = player.inventory.items[inventory_index]

            <span style="color: green">if game_state == GameStates.SHOW_INVENTORY:</span>
                <span style="color: blue">player_turn_results.extend(player.inventory.use(item))</span>
            <span style="color: green">elif game_state == GameStates.DROP_INVENTORY:
                player_turn_results.extend(player.inventory.drop_item(item))</span></pre>

        <p>
            We haven't defined the <code>drop_item</code> method of inventory yet, so let's do that now. It will
            remove the item from the inventory, set the item's coordinates to match the player (since the item gets
            dropped at the player's feet), and return the results.
        </p>

        <pre>    ...
    def remove_item(self, item):
        self.items.remove(item)

    <span style="color: green">def drop_item(self, item):
        results = []

        item.x = self.owner.x
        item.y = self.owner.y

        self.remove_item(item)
        results.append({'item_dropped': item, 'message': Message('You dropped the {0}'.format(item.name),
                                                                 libtcod.yellow)})

        return results</span></pre>

        <p>
            Finally, handle the results in <code>engine.py</code>:
        </p>

        <pre>        ...
        for player_turn_result in player_turn_results:
            message = player_turn_result.get('message')
            dead_entity = player_turn_result.get('dead')
            item_added = player_turn_result.get('item_added')
            item_consumed = player_turn_result.get('consumed')
            <span style="color: green">item_dropped = player_turn_result.get('item_dropped')</span>
            ...
            if item_consumed:
                game_state = GameStates.ENEMY_TURN

            <span style="color: green">if item_dropped:
                entities.append(item_dropped)

                game_state = GameStates.ENEMY_TURN</span></pre>

        <p>
            That was quite the chapter! It took a lot of setup to get using the items, but now we've got a framework
            that we can add on to. In the next chapter, we'll do just that, by adding some scrolls to cast spells at
            our enemies.
        </p>

        <p>
            If you want to see the code so far in its entirety,
            <a href="https://github.com/TStand90/roguelike_tutorial_revised/tree/part8">click here</a>.
        </p>

        <p>
            <a href="/tutorials/tcod/part-9">Click here to move on to the next part of this tutorial.</a>
        </p>
    </div>
