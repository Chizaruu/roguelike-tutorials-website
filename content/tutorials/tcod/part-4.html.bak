---
title: "Part 4 - Field of View"
date: 2019-03-30T09:33:44-07:00
draft: false
---


    <div>
    	<p>
            We have a dungeon now, and we can move about it freely. But are we really <i>exploring</i> the dungeon
            if we can just see it all from the beginning?
    	</p>

        <p>
            Most roguelikes (not all!) only let you see within a certain range of your character, and our will be no
            different. We need to implement a way to calculate the "Field of View" for our adventurer, and fortunately,
            libtcod makes that easy!
        </p>

        <p>
            We'll need to define a few variables before we get started. Add these in the same section as our screen
            and map variables:
        </p>

        <pre>    ...
    max_rooms = 30

    <span style="color: green">fov_algorithm = 0
    fov_light_walls = True
    fov_radius = 10</span>

    colors = {
    ...</pre>

        <p>
            '0' is just the default algorithm that libtcod uses; it has more, and I encourage you to experiment
            with them later. <code>fov_light_walls</code> just tells us whether or not to 'light up' the walls we see;
            you can change it if you don't like the way it looks. <code>fov_radius</code> is somewhat obvious, it tells
            us how far we can actually see.
        </p>

        <p>
            We also need to update the <code>colors</code> dictionary, because now we need two more colors for the
            'light' versions of both walls and floors. Walls and floors in our fov will be 'lit', distinguishing them
            from the ones outside what we can see.
        </p>

        <pre>    colors = {
        'dark_wall': libtcod.Color(0, 0, 100),
        'dark_ground': libtcod.Color(50, 50, 150)<span style="color: green">,
        'light_wall': libtcod.Color(130, 110, 50),
        'light_ground': libtcod.Color(200, 180, 50)</span>
    }</pre>

        <p>
            <i>* Don't forget to add the comma after the 'dark_ground' entry; Python will throw an error without it!</i>
        </p>

        <p>
            If you don't like these colors, feel free to change them to your liking.
        </p>

        <p>
            The thing about field of view is that it doesn't need to be computed every turn. In fact, it would be
            quite a waste to do so! We really only need change it when the player moves. Attacking, using an item,
            or just standing still for a turn doesn't alter FOV. We can handle this by having a boolean variable,
            which we'll call <code>fov_recompute</code>, which tells us if we need to recompute. We can define it
            somewhere above our game loop (I put mine right after the map initialization).
        </p>

        <pre>    ...
    game_map.make_map(max_rooms, room_min_size, room_max_size, map_width, map_height, player)

    <span style="color: green">fov_recompute = True</span>

    key = libtcod.Key()
    ...</pre>

        <p>
            It's <code>True</code> by default, because we have to compute it right when the game starts.
        </p>

        <p>
            Now let's initialize our field of view, which we'll store in a variable called <code>fov_map</code>.
            <code>fov_map</code> will need to not only be initialized, but recomputed when the player moves. Let's
            keep these functions out of <code>engine.py</code>, and instead, put them in a new file, called
            <code>fov_functions.py</code>. In that file, put the following:
        </p>

        <pre>import tcod as libtcod


def initialize_fov(game_map):
    fov_map = libtcod.map_new(game_map.width, game_map.height)

    for y in range(game_map.height):
        for x in range(game_map.width):
            libtcod.map_set_properties(fov_map, x, y, not game_map.tiles[x][y].block_sight,
                                       not game_map.tiles[x][y].blocked)

    return fov_map</pre>


        <p>
            Call this function in <code>engine.py</code> and store the result in <code>fov_map</code>.
        </p>

        <pre>    ...
    fov_recompute = True

    <span style="color: green">fov_map = initialize_fov(game_map)</span>

    key = libtcod.Key()
    ...</pre>

        <p>
            Don't forget the import for the function.
        </p>

        <pre>...
from entity import Entity
<span style="color: green">from fov_functions import initialize_fov</span>
from input_handlers import handle_keys
...</pre>

        <p>
            While we're at it, let's modify the section where we move the player to set <code>fov_recompute</code> to
            True.
        </p>

        <pre>                ...
                player.move(dx, dy)

                <span style="color: green">fov_recompute = True</span></pre>

        <p>
            But where does the recompute actually <i>happen</i>? For that, let's add a new function to
            <code>fov_functions.py</code> to do the recomputing. The recompute function will modify the
            <code>fov_map</code> variable based on where the player is, what the radius for lighting is, whether or
            not to light the walls, and what algorithm we're using.
        </p>
        <p>
            That's a lot of variables, but consider this: in your game, you'll probably pick one FOV algorithm and stick
            with it. Also, whether or not you light the walls probably won't change during the course of the game. So
            why not create our function with default arguments? That way, we can pass the <code>light_walls</code> and
            <code>algorithm</code> variables if we want to, but if not, a default is chosen. That looks like this:
        </p>

        <pre>def initialize_fov(game_map):
    ...

<span style="color: green">def recompute_fov(fov_map, x, y, radius, light_walls=True, algorithm=0):
    libtcod.map_compute_fov(fov_map, x, y, radius, light_walls, algorithm)</span></pre>

        <p>
            So when we call the function, we have to give fov_map, x, y, and radius, but we don't necessarily have to
            pass in light_walls or algorithm. In my <code>engine.py</code> file, I'll pass them in anyway, but you
            don't have to if you don't want to (you can also change the defaults I gave above to whatever you prefer).
        </p>

        <p>
            Whatever you decide, put your fov recomputation in <code>engine.py</code> like so:
        </p>

        <pre>        ...
        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS, key, mouse)

        <span style="color:green">if fov_recompute:
            recompute_fov(fov_map, player.x, player.y, fov_radius, fov_light_walls, fov_algorithm)</span>

        render_all(con, entities, game_map, screen_width, screen_height, colors)
        ...</pre>

        <p>
            ... And, of course, we have to import that function:
        </p>

        <pre>...
from entity import Entity
from fov_functions import initialize_fov<span style="color: green;">, recompute_fov</span>
from input_handlers import handle_keys
...</pre>

        <p>
            Now, after the player successfully moves, the field of view will be set to recalculate, but it won't if we
            do something else.
        </p>

        <p>
            With our field of view calculated, we need to actually <i>display</i> it (if you run the code now, you won't
            notice any visible change). Open up <code>render_functions.py</code> and modify the <code>render_all</code>
            function like this:
        </p>

        <pre><span style="color: red; text-decoration: line-through">def render_all(con, entities, game_map, screen_width, screen_height, colors):</span>
<span style="color: green">def render_all(con, entities, game_map, fov_map, fov_recompute, screen_width, screen_height, colors):</span>
    <span style="color: green">if fov_recompute:</span>
        <span style="color: blue">for y in range(game_map.height):
            for x in range(game_map.width):</span>
                <span style="color: green">visible = libtcod.map_is_in_fov(fov_map, x, y)</span>
                <span style="color: blue">wall = game_map.tiles[x][y].block_sight</span>

                <span style="color: green">if visible:
                    if wall:
                        libtcod.console_set_char_background(con, x, y, colors.get('light_wall'), libtcod.BKGND_SET)
                    else:
                        libtcod.console_set_char_background(con, x, y, colors.get('light_ground'), libtcod.BKGND_SET)
                else:</span>
                    <span style="color: blue">if wall:
                        libtcod.console_set_char_background(con, x, y, colors.get('dark_wall'), libtcod.BKGND_SET)
                    else:
                        libtcod.console_set_char_background(con, x, y, colors.get('dark_ground'), libtcod.BKGND_SET)</span>

    # Draw all entities in the list
    for entity in entities:
        draw_entity(con, entity)

    libtcod.console_blit(con, 0, 0, screen_width, screen_height, 0, 0, 0)</pre>

        <p>
            <i>* Note: Blue denotes lines that are exactly the same as before, expect for their indentation. The
            if statements for <code>fov_recompute</code> and <code>visible</code> force certain lines to be indented
            farther than they were before. Remember, this is Python, indentation matters!</i>
        </p>

        <p>
            Now our <code>render_all</code> function will display tiles differently, depending on if they're in our
            field of view or not. If a tile falls in the <code>fov_map</code>, we draw it with the 'light' colors, and
            if not, we draw the 'dark' version.
        </p>

        <p>
            The definition of <code>render_all</code> has changed, so be sure to update it in <code>engine.py</code>.
            While we're at it, let's set <code>fov_recompute</code> to <code>False</code> after we call
            <code>render_all</code>.
        </p>

        <pre>        ...
        <span style="color: red; text-decoration: line-through">render_all(con, entities, game_map, screen_width, screen_height, colors)</span>
        <span style="color: green">render_all(con, entities, game_map, fov_map, fov_recompute, screen_width, screen_height, colors)

        fov_recompute = False</span></pre>

        <p>
            Run the project now. The player's field of view is now visible! But, despite being able to "see" the FOV,
            it still doesn't really <i>do</i> anything. We can still see the entire map, along with our NPC. Luckily,
            the changes we have to make to fix this are fairly minimal.
        </p>

        <p>
            Let's start with our NPC. We should just be able to modify our <code>draw_entity</code> function to account
            for the field of view, which would solve our problem.
        </p>

        <pre><span style="color: red; text-decoration: line-through">def draw_entity(con, entity):</span>
<span style="color: green">def draw_entity(con, entity, fov_map):
    if libtcod.map_is_in_fov(fov_map, entity.x, entity.y):</span>
        <span style="color: blue">libtcod.console_set_default_foreground(con, entity.color)
        libtcod.console_put_char(con, entity.x, entity.y, entity.char, libtcod.BKGND_NONE)</span></pre>

        <p>
            <i> * Again, the blue means the line is the same as before, except the indentation has changed.</i>
        </p>

        <p>
            Also be sure to update the part where we call the function:
        </p>

        <pre>    for entity in entities:
        <span style="color: red; text-decoration: line-through">draw_entity(con, entity)</span>
        <span style="color: green">draw_entity(con, entity, fov_map)</span></pre>

        <p>
            Run the project again, and you won't see the NPC unless it's in your field of view.
        </p>

        <p>
            Now for the map. In traditional roguelikes, your character can only see whats inside its field of view,
            but it will "remember" areas that were explored previously. We can accomplish this effect by adding a
            variable called <code>explored</code> to our <code>Tile</code> class. Modify the <code>__init__</code>
            function in <code>Tile</code> to include this new variable:
        </p>

        <pre>        ...
        self.block_sight = block_sight

        <span style="color: green">self.explored = False</span></pre>

        <p>
            This new variable needs to be taken into account in our <code>render_all</code> function. Let's do that now.
            We'll only draw the tiles outside of our field of view if we've explored them previously. Also, any tiles
            that <i>are</i> in our field of view, we'll mark as 'explored'.
        </p>

        <pre>                ...
                visible = libtcod.map_is_in_fov(fov_map, x, y)
                wall = game_map.tiles[x][y].block_sight

                if visible:
                    if wall:
                        libtcod.console_set_char_background(con, x, y, colors.get('light_wall'), libtcod.BKGND_SET)
                    else:
                        libtcod.console_set_char_background(con, x, y, colors.get('light_ground'), libtcod.BKGND_SET)

                    <span style="color: green">game_map.tiles[x][y].explored = True</span>
                <span style="color: red; text-decoration: line-through">else:</span>
                <span style="color: green">elif game_map.tiles[x][y].explored:</span>
                    if wall:
                        libtcod.console_set_char_background(con, x, y, colors.get('dark_wall'), libtcod.BKGND_SET)
                    else:
                        libtcod.console_set_char_background(con, x, y, colors.get('dark_ground'), libtcod.BKGND_SET)
                    ...</pre>

        <p>
            We now have a real, explorable dungeon! True, there may not be much <i>in</i> there right now, but this was
            a major step to a working game. In the next few parts, we'll fill the dungeon with some evil(?) monsters to
            punch.
        </p>

        <p>
            If you want to see the code so far in its entirety,
            <a href="https://github.com/TStand90/roguelike_tutorial_revised/tree/part4">click here</a>.
        </p>

        <p>
            <a href="/tutorials/tcod/part-5">Click here to move on to the next part of this tutorial.</a>
        </p>
    </div>